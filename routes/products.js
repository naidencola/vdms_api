var express = require('express');
var bodyParser = require('body-parser');
var validate = require('express-jsonschema').validate;
var crypto = require('crypto');
var router = express.Router();

var productSchema = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Product",
    "description": "A product",
    "type": "object",
    "properties": {
        "code": {
            "description": "The unique identifier for a product, autogenerated by the api",
            "type": "string"
        },
        "name": {
            "description": "Name of the product",
            "type": "string"
        },
        "price": {
            "type": "number",
            "minimum": 0
        },
        "tags": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true
        }
    },
    "required": ["code", "name"]
}

var productsDatabase = [
  {
    "code": "abcde123",
    "name": "new laptop",
    "price": 899.99,
    "tags": ["computer", "laptop"]
  },
  {
    "code": "ipad1",
    "name": "ipad",
    "price": 699.99,
    "tags": ["tablet"]
  },
  {
    "code": "phone1",
    "name": "galaxy s6",
    "price": 599.99,
    "tags": ["phone"]
  },
  {
    "code": "phone2",
    "name": "iphone 6s",
    "price": 649.99,
    "tags": ["phone"]
  }
];


router.get('/', function(req, res, next) {
  var tagFilter = req.query.tag;
  var results = productsDatabase;
  if (tagFilter && tagFilter.length > 0) {
    results = productsDatabase.filter(function(item) {
      if (!item.tags) return false;
      return item.tags.indexOf(tagFilter) >= 0;
    });
  }
  res.json(results);
});

router.get('/:code', function(req, res) {
  var product = productsDatabase.find(function(item, index) {
    return item.code == req.params.code;
  });
  res.json(product);
});

router.post('/', validate({body: productSchema}), function(req, res) {
  // there should be some simple sanity checks for duplicates or 'code' collisions
  var newProductCode = crypto.randomBytes(3).toString('hex');
  var newProduct = req.body;
  newProduct.code = newProductCode; // overwrite any provided product code

  productsDatabase.push(newProduct);
  res.send({ message: 'success', newCode: newProductCode });
});

module.exports = router;
